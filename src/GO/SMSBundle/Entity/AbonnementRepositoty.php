<?php

namespace GO\SMSBundle\Entity;

use Doctrine\ORM\EntityRepository;
use GO\SMSBundle\Utils\Constants as Cons;
/**
 * AbonnementRepositoty
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AbonnementRepositoty extends EntityRepository
{
    public function findAbonnementBy($condition, $value,$date_debut=null,$date_fin=null)
    {
        $qb= $this->createQueryBuilder('ab');
        $qb->join('ab.client','cl');
        $qb->addSelect('cl');
        switch ($condition)
        {
            case Cons::FIND_BY_TEL:
            {
                $qb->where('cl.tel=:tel');$qb->setParameter('tel', $value);
            }break;
            case Cons::FIND_BY_PRENOM:
            {
                $qb->where('cl.prenom=:prenom');$qb->setParameter('prenom', $value);
            }break;
            case Cons::FIND_BY_NOM:
            {
                $qb->where('cl.nom=:nom');$qb->setParameter('nom', $value);
            }break;
            case Cons::FIND_BY_ADRESSE:
            {
                $qb->where('cl.adresse=:adresse');$qb->setParameter('adresse', $value);
            }break;
            case Cons::FIND_BY_FORMULE:
            {
                $qb->where('ab.formule=:formule');$qb->setParameter('formule', $value);
            }break;
            case Cons::FIND_BY_VILLAGE:
            {
                $qb->where('cl.village=:village');$qb->setParameter('village', $value);
            }break;
            case Cons::FIND_BY_DATE:
            {
                $qb->where('DATE(ab.date)>=:date');$qb->setParameter('date', $date_debut);
                $qb->andWhere('DATE(ab.date)<=:date');$qb->setParameter('date', $date_fin);
            }break;
        }
        return $qb->getQuery()->getResult();
    }
    public function findOneByClient($tel)
    {
        return $this->createQueryBuilder('a')
               ->where('SUBSTRING(a.client,-9,9)=:tel')
               ->setParameter('tel', $tel)
                ->orderBy('a.id','DESC')
                ->setMaxResults(1)
                ->getQuery()
                ->getOneOrNullResult();
    }
    public function getNombreAbonnement($condition,$date_debut=null,$date_fin=null)
    {
        $qb=$this->createQueryBuilder('a');
        $qb->select('COUNT(a.id)');
        switch($condition)
        {
            
            case Cons::AUJOURDHUI: $qb->where('DATE(a.date)=CURRENT_DATE()');
                break;
            case Cons::MOIS: $qb->where('MONTH(a.date)=MONTH(CURRENT_DATE()) AND YEAR(a.date)=YEAR(CURRENT_DATE())');
                break;
            case Cons::DATE_INTERVALLE: 
                if(!is_null($date_debut))
                {
                    $qb->where('DATE(a.date)>=:date_debut');
                    $qb->setParameter('date_debut', $date_debut);
                    if(!is_null($date_fin))
                    {
                        $qb->andWhere('DATE(a.date)<=:date_fin');
                        $qb->setParameter('date_fin', $date_fin);
                    }
                }else
                {
                    throw new \RuntimeException('Aucune date entrÃ©e ou format date invalide!');
                }
                break;
        }
        return $qb->getQuery()->getSingleScalarResult();
    }
}
