<?php

namespace GO\CaravaneBundle\Entity;

use Doctrine\ORM\EntityRepository;
use GO\CaravaneBundle\Utils\Constants as Cons;

/**
 * PayerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PayerRepository extends EntityRepository
{
    public function getTotalPayeUser($user, $depart=null, $event=null)
    {
           $qb= $this->createQueryBuilder('p');
           $qb->where('p.agent= :agent');
           if($depart!=null)
           {
              $qb->join('p.res', 'r')
                ->addSelect('r');
               $qb->andWhere('r.depart= :depart');
              $qb->setParameter('depart',$depart);
           }
           $qb->setParameter('agent',$user);
           $qb->select('SUM(p.montant) as total');
          return (int) $qb->getQuery()->getSingleScalarResult();
    }
    public function getTotalPayeDepart($dep, $des=null, $event=null)
    {
           $qb= $this->createQueryBuilder('p');
           $qb->join('p.res', 'r')
                ->addSelect('r');
           $qb->where('r.depart= :depart');
           if($des!=null)
           {
              
               $qb->andWhere('r.des= :des');
              $qb->setParameter('des',$des);
           }
           $qb->setParameter('depart',$dep);
           $qb->select('SUM(p.montant) as total');
          return (int) $qb->getQuery()->getSingleScalarResult();
    }
    public function getTotalPayeEvent(Evenement $event, \GO\UserBundle\Entity\User $user=null,$des=null)
    {
           $qb= $this->createQueryBuilder('p');
           $qb->join('p.res', 'r')
                ->addSelect('r');
          $qb->join('r.depart', 'dep');
           $qb->where('dep.event=:event');
           if($des!=null)
           {
              
               $qb->andWhere('r.des= :des');
              $qb->setParameter('des',$des);
           }
           if($user!=null)
           {
              
               $qb->andWhere('p.agent= :user');
              $qb->setParameter('user',$user);
           }
           $qb->setParameter('event',$event);
           $qb->select('SUM(p.montant) as total');
          return (int) $qb->getQuery()->getSingleScalarResult();
    }
    public function getNombrePaye($condition, $param, $depart=null,$des=null,$event=null)
    {
        $qb= $this->createQueryBuilder('p');
        switch ($condition)
        {
            case Cons::USER:
        
           $qb->where('p.agent= :agent');
           $qb->join('p.res', 'r')
                ->addSelect('r');
           if($depart!=null)
           {
              $qb->andWhere('r.depart= :depart');
              $qb->setParameter('depart',$depart);
           }
           if($des!=null)
           {
              
               $qb->andWhere('r.des= :des');
              $qb->setParameter('des',$des);
           }
           $qb->setParameter('agent',$param);
           
           break;
            case Cons::DEPART:
            $qb->join('p.res', 'r')
                ->addSelect('r');
            $qb->where('r.depart= :depart');
                if($des!=null)
                {
                   $qb->andWhere('r.des= :des');
                   $qb->setParameter('des',$des);
                }
           $qb->setParameter('depart',$param);
           break;
        }
        $qb->select('COUNT(p.id) as total');
          return (int) $qb->getQuery()->getSingleScalarResult();
    }
           
}
