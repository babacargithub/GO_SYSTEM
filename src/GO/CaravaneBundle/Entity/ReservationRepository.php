<?php

namespace GO\CaravaneBundle\Entity;

use Doctrine\ORM\EntityRepository;
use GO\CaravaneBundle\Utils\Constants as Cons;

/**
 * ReservationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReservationRepository extends EntityRepository
{
    public function getListeRes($id_depart)
    {
       $qb=$this->createQueryBuilder('r')
       ->join('r.depart', 'd')
                ->addSelect('d')
                ->join('r.client', 'c')
                ->addSelect('c')
                ->join('r.pointDep', 'p')
                ->addSelect('p')
                ->join('r.des', 'des')
                ->addSelect('des')
                ->leftJoin('r.agent', 'u')
                ->addSelect('u')
                 ->leftJoin('r.paiement', 'py')
                ->addSelect('py')
               ->where('r.depart=:dep')
               ->setParameter('dep', $id_depart)
               ->orderBy('r.numPlace,p.id');
      return $qb->getQuery()->getResult();
      // return $this->findByDepart($id_depart);
                
                
    }
    public function getAll()
    {
       $qb=$this->createQueryBuilder('r')
       ->join('r.depart', 'd')
                ->addSelect('d')
                ->join('r.client', 'c')
                ->addSelect('c')
                ->join('r.pointDep', 'p')
                ->addSelect('p')
                ->join('r.des', 'des')
                ->addSelect('des')
                ->leftJoin('r.agent', 'u')
                ->addSelect('u')
                 ->leftJoin('r.paiement', 'py')
                ->addSelect('py')
               ->where('d.date>=NOW()')
              // ->setParameter('dep', $id_depart)
               ->orderBy('p.id');
      return $qb->getQuery()->getResult();
      // return $this->findByDepart($id_depart);
                
                
    }
    public function getListePayesRes($id_depart, $filter=null)
    {
       $qb=$this->createQueryBuilder('r')
       ->join('r.depart', 'd')
                ->addSelect('d')
                ->join('r.client', 'c')
                ->addSelect('c')
                ->join('r.pointDep', 'p')
                ->addSelect('p')
                ->join('r.des', 'des')
                ->addSelect('des')
                ->leftJoin('r.agent', 'u')
                ->addSelect('u')
                 ->leftJoin('r.paiement', 'py')
                ->addSelect('py')
               ->where('r.depart=:dep')
               ->setParameter('dep', $id_depart);
       if($filter==Cons::PAYE)
       {
               $qb->andWhere('r.paiement IS NOT NULL');
       }
        elseif($filter==Cons::NON_PAYE)
        {
               $qb->andWhere('r.paiement IS NULL');
        }
               $qb->orderBy('r.numPlace,p.id,c.prenom');
      return $qb->getQuery()->getResult();
      // return $this->findByDepart($id_depart);
                
                
    }
    public function getNombreVoyage($tel)
    {
       return $qb=$this->createQueryBuilder('r')
               
                ->join('r.client', 'c')
                ->addSelect('c')
               ->select('COUNT(r.id)')
               ->where('c.tel=:tel')
               ->setParameter('tel', $tel)
                ->getQuery()
                ->getSingleScalarResult();
      
    }
    public function getNombreInscritDepart($depart,$des=null)
    {
        $qb= $this->createQueryBuilder('r');
       $qb->where('r.depart= :depart');
           if($des!=null)
           {
              
               $qb->andWhere('r.des= :des');
              $qb->setParameter('des',$des);
           }
          
          $qb->setParameter('depart',$depart);
        $qb->select('COUNT(r.id) as total');
          return (int) $qb->getQuery()->getSingleScalarResult();
    
    }
    public function getNombreConfirmeDepart($depart,$des=null)
    {
        $qb= $this->createQueryBuilder('r');
       $qb->where('r.depart= :depart');
        $qb->andWhere('r.confirme= :param');
        $qb->setParameter('param',true);
        $qb->setParameter('depart',$depart);
        $qb->select('COUNT(r.id) as total');
          return (int) $qb->getQuery()->getSingleScalarResult();
    
    }
    public function getNombreInscritDepartOnline(Depart $depart,$des=null)
    {
        $qb= $this->createQueryBuilder('r');
       $qb->where('r.depart= :depart');
           if($des!=null)
           {
              
               $qb->andWhere('r.des= :des');
              $qb->setParameter('des',$des);
           }
          
          $qb->setParameter('depart',$depart);
          $qb->andWhere('r.online=:param');
          $qb->setParameter('param', true);
        $qb->select('COUNT(r.id) as total');
          return (int) $qb->getQuery()->getSingleScalarResult();
    
    }
    public function getNombreInscritPointsDep(Depart $depart)
    {
        $qb= $this->createQueryBuilder('r')
       ->select('COUNT(r.id) as nombre_inscrit')
        ->join('r.pointDep','pd')
        ->addSelect('pd.nom')
        ->groupBy('r.pointDep')
        ->where('r.depart= :depart')
        ->setParameter('depart',$depart);
          return  $qb->getQuery()->getResult();
    
    }
     public function reservationExists($tel, $depart)
    {
       $qb=$this->createQueryBuilder('r')
                ->join('r.client', 'c')
                ->addSelect('c')
               ->where('c.tel=:tel')
               ->setParameter('tel', $tel)
               //->andWhere('r.client=c')
               ->andWhere('r.depart=:depart')
               ->setParameter('depart', $depart)
                ->getQuery()
                ->getResult();
       if(empty($qb))
           return false;
       else {
       return true;    
       }
    }
     public function historiqueVoyage($tel)
    {
       $qb=$this->createQueryBuilder('r')
                ->join('r.client', 'c')
                ->addSelect('c')
               ->where('c.tel=:tel')
               ->setParameter('tel', $tel)
                ->getQuery()
                ->getResult();
       
           return    $qb;
       
    }
     public function historiqueReservations($condition, $param)
    {
       $qb=$this->createQueryBuilder('r')
               ->join('r.depart', 'd')
                ->addSelect('d');
                $qb->where('d.event=:param')
               ->setParameter('param', $param);
               
       
           return    $qb->getQuery()
                ->getResult();
       
    }
    public function getDernierVoyage($tel)
    {
        $qb=$this->createQueryBuilder('r')
                ->join('r.client', 'c')
                ->join('r.depart', 'd')
                ->addSelect('c')
               ->where('c.tel=:tel')
               ->andWhere('DATE(d.date) >= CURRENT_DATE()')
               ->setParameter('tel', $tel)
                ->orderBy('r.date', 'DESC')
                ->setMaxResults(1)
                 ->setFirstResult(0)
                ->getQuery();
        $reult=$qb->getResult();
        if(isset($reult[0]))
       return    $reult[0];
        else
            return null;
    }
     public function getPremierePlaceVide(Depart $depart)
    {
       $qb=$this->createQueryBuilder('r')
               ->where('r.depart=:depart')
               ->andWhere('r.numPlace IS NOT NULL')
               ->setParameter('depart', $depart->getId())
               ->orderBy('r.numPlace');
       $reservations=$qb->getQuery()->getResult();
       $place=1;
       foreach ($reservations as $res)
       {
           if($res->getNumPlace() >$place)
           {
               return (int) $place;
           }
           $place++;
       }
       
                return null;
    }
     public function getDernierNumPlace(Depart $depart)
    {
       $qb=$this->createQueryBuilder('r')
                
                ->select('MAX(r.numPlace)')
              
               ->where('r.depart=:depart')
               ->setParameter('depart', $depart->getId());
                return (int) $qb->getQuery()->getSingleScalarResult();
    }
    
}
