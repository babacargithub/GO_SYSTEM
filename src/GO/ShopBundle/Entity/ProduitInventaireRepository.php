<?php

namespace GO\ShopBundle\Entity;

use Doctrine\ORM\EntityRepository;
use GO\ShopBundle\Entity\InventaireRepository as InventRepo;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\Query\ResultSetMappingBuilder;

/**
 * ProduitInventaireRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProduitInventaireRepository extends EntityRepository
{
    public function getProduits(Inventaire $inventaire, $filter)
    {
      
        $qb= $this->createQueryBuilder('pi');
        $qb->join('GO\ShopBundle\Entity\ProduitInventaire', 'pi', 'WITH', 'pi.inventaire=i.id')
             ->select('pi');
         $qb->orderBy('pi.dateEntree', 'DESC');
         switch($filter)
        {
            case InventRepo::PRODUITS_FIND_ALL: 
                break;
            case InventRepo::PRODUITS_CATEGORIE: $qb->where('MONTH(v.date)=MONTH(CURRENT_DATE()) AND YEAR(v.date)=YEAR(CURRENT_DATE())');
                break;
            
            case InventRepo::PRODUITS_NON_INVENTE: 
                $qb= $this->createQueryBuilder('pi');
                    $qb->innerJoin('\GO\ShopBundle\Entity\Produit', 'p', "WITH","pi.produit=p.id")
                            //->select('p')
                            ->innerJoin('\GO\ShopBundle\Entity\Stock', 's', "WITH","s.produit=p.id")
                            ->select("s")
                            ->where('s.quantite>0')
                            ->andWhere(('s.shop=3'))
                    ->andWhere(
                     $qb->expr()->notIn(
                           'p.id',
                           $this->createQueryBuilder('pi2')
                                
                                ->select('p2.id')
                                ->innerJoin('\GO\ShopBundle\Entity\Produit', 'p2', "WITH","p2.id=pi2.produit")
                                ->where('pi2.inventaire = :inventaireSubQuery')
                                ->getQuery()->getDQL()
                        
                        
                     
                    ))
                    ->setParameter('inventaireSubQuery', $inventaire);
                //$qb->join('GO\ShopBundle\Entity\ProduitInventaire', 'pi', 'WITH', 'pi.inventaire=i.id')
             //->select('pi')
             
                //$qb->where('DATE(v.date)>=:date_debut');
                    return $qb->getQuery()->getResult();
                break;
           case InventRepo::PRODUITS_TYPE: 
               $rsm= new ResultSetMappingBuilder($this->getEntityManager());
               $rsm->addRootEntityFromClassMetadata("GO\ShopBundle\Entity\Achat", "a");
               $sql="SELECT * FROM achat a "
                       . "INNER JOIN factureachat fach ON a.facture=fach.id "
                       //. "INNER JOIN inventaire inv ON inv.shop=fach.shop "
                       . "WHERE a.id NOT IN (SELECT pi.code_bar FROM produit_inventaire pi WHERE pi.inventaire=:inventaire "
                       . "AND pi.code_bar IS NOT NULL) AND fach.shop=:shop AND a.quantite_restant>0 "
                       ; 
                $qb= $this->getEntityManager()->createNativeQuery($sql, $rsm);  
                $qb->setParameter("shop", $inventaire->getShop())
                     ->setParameter("inventaire", $inventaire);

                //->setParameter('shop', $inventaire->getShop());
                //$qb->join('GO\ShopBundle\Entity\ProduitInventaire', 'pi', 'WITH', 'pi.inventaire=i.id')
             //->select('pi')
             
                //$qb->where('DATE(v.date)>=:date_debut');
                break;
            case InventRepo::PRODUITS_DEJA_INVENTE: 
                $qb->where('DATE(v.date)>=:date_debut');
                break;
            case InventRepo::PRODUITS_DEFICIT: 
                $qb->where('DATE(v.date)>=:date_debut');
                break;
            case InventRepo::PRODUITS_SURPLUS: 
                $qb->where('DATE(v.date)>=:date_debut');
                break;
        }
         
       //$qb->andWhere('pi.inventaire=:inventaire');
       //  $qb->setParameter('inventaire', $inventaire);
        //($qb->getQuery()->getResult());die();
        //return $qb->getResult();
        return $qb->getResult();
    }
}
