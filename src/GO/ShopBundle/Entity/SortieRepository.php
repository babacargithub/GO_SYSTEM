<?php

namespace GO\ShopBundle\Entity;
use GO\ShopBundle\Entity\Charge;
use Doctrine\ORM\EntityRepository;
use GO\ShopBundle\Utils\Constants as Cons;
/**
 * SortieRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SortieRepository extends EntityRepository
{
    public function getListeSortie(Shop $shop, $condition,$date_debut=null, $date_fin=null)
    {
        $qb= $this->createQueryBuilder('s');
        switch($condition)
        {
            case Cons::AUJOURDHUI: $qb->where('DATE(s.date)=CURRENT_DATE()');
                break;
            case Cons::MOIS: $qb->where('MONTH(s.date)=MONTH(CURRENT_DATE()) AND YEAR(s.date)=YEAR(CURRENT_DATE())');
                break;
            case Cons::DATE_INTERVALLE: 
                if(!is_null($date_debut))
                {
                    $qb->where('DATE(s.date)>=:date_debut');
                    $qb->setParameter('date_debut', $date_debut);
                    if(!is_null($date_fin))
                    {
                        $qb->andWhere('DATE(s.date)<=:date_fin');
                        $qb->setParameter('date_fin', $date_fin);
                    }
                }else
                {
                    throw new \RuntimeException('Aucune date entrée ou format date invalide!');
                }
                break;
        }
         $qb->andWhere('s.shop=:shop');
         $qb->setParameter('shop', $shop);
         $qb->orderBy('s.date', 'DESC');
       
        return $qb->getQuery()
                ->getResult();
    }
    public function getTotalSortie(Shop $shop, $condition,$date_debut=null, $date_fin=null)
    {
        $qb= $this->createQueryBuilder('s')
                ->select('SUM(s.montant)');
         switch($condition)
        {
            case Cons::AUJOURDHUI: $qb->where('DATE(s.date)=CURRENT_DATE()');
                break;
            case Cons::MOIS: $qb->where('MONTH(s.date)=MONTH(CURRENT_DATE()) AND YEAR(s.date)=YEAR(CURRENT_DATE())');
                break;
            case Cons::DATE_INTERVALLE: 
                if(!is_null($date_debut))
                {
                    $qb->where('DATE(s.date)>=:date_debut');
                    $qb->setParameter('date_debut', $date_debut);
                    if(!is_null($date_fin))
                    {
                        $qb->andWhere('DATE(s.date)<=:date_fin');
                        $qb->setParameter('date_fin', $date_fin);
                    }
                }else
                {
                    throw new \RuntimeException('Aucune date entrée ou format date invalide!');
                }
                break;
        }
                $qb->andWhere('s.shop=:shop');
                $qb->setParameter('shop', $shop);
               return $qb->getQuery()->getSingleScalarResult();
        
    }
    public function getListeTypeSortie(\GO\ShopBundle\Entity\Shop $shop, Charge $type, $condition,$date_debut=null, $date_fin=null)
    {
        $qb= $this->createQueryBuilder('s');
        switch($condition)
        {
            case Cons::AUJOURDHUI: $qb->where('DATE(s.date)=CURRENT_DATE()');
                break;
            case Cons::MOIS: $qb->where('MONTH(s.date)=MONTH(CURRENT_DATE()) AND YEAR(s.date)=YEAR(CURRENT_DATE())');
                break;
            case Cons::DATE_INTERVALLE: 
                if(!is_null($date_debut))
                {
                    $qb->where('DATE(s.date)>=:date_debut');
                    $qb->setParameter('date_debut', $date_debut);
                    if(!is_null($date_fin))
                    {
                        $qb->andWhere('DATE(s.date)<=:date_fin');
                        $qb->setParameter('date_fin', $date_fin);
                    }
                }else
                {
                    throw new \RuntimeException('Aucune date entrée ou format date invalide!');
                }
                break;
        }
         $qb->andWhere('s.shop=:shop');
         $qb->setParameter('shop', $shop);
         $qb->andWhere('s.charge=:type');
         $qb->setParameter('type', $type);
         $qb->orderBy('s.date', 'DESC');
       
        return $qb->getQuery()
                ->getResult();
    }
    public function getTotalSortieType(Shop $shop, Charge $type,$condition,$date_debut=null, $date_fin=null)
    {
        $qb= $this->createQueryBuilder('s')
                ->select('SUM(s.montant)');
         switch($condition)
        {
            case Cons::AUJOURDHUI: $qb->where('DATE(s.date)=CURRENT_DATE()');
                break;
            case Cons::MOIS: $qb->where('MONTH(s.date)=MONTH(CURRENT_DATE()) AND YEAR(s.date)=YEAR(CURRENT_DATE())');
                break;
            case Cons::DATE_INTERVALLE: 
                if(!is_null($date_debut))
                {
                    $qb->where('DATE(s.date)>=:date_debut');
                    $qb->setParameter('date_debut', $date_debut);
                    if(!is_null($date_fin))
                    {
                        $qb->andWhere('DATE(s.date)<=:date_fin');
                        $qb->setParameter('date_fin', $date_fin);
                    }
                }else
                {
                    throw new \RuntimeException('Aucune date entrée ou format date invalide!');
                }
                break;
        }
                $qb->andWhere('s.shop=:shop');
                $qb->setParameter('shop', $shop);
                 $qb->andWhere('s.charge=:type');
                $qb->setParameter('type', $type);
               return $qb->getQuery()->getSingleScalarResult();
        
    }
    public function getTotalDepense(Shop $shop,$condition,$date_debut=null, $date_fin=null)
    {
        $qb= $this->createQueryBuilder('s')
                ->select('SUM(s.montant)')
                ->innerJoin('s.charge', 'pd');
                
                
         switch($condition)
        {
            case Cons::AUJOURDHUI: $qb->where('DATE(s.date)=CURRENT_DATE()');
                break;
            case Cons::MOIS: $qb->where('MONTH(s.date)=MONTH(CURRENT_DATE()) AND YEAR(s.date)=YEAR(CURRENT_DATE())');
                break;
            case Cons::DATE_INTERVALLE: 
                if(!is_null($date_debut))
                {
                    $qb->where('DATE(s.date)>=:date_debut');
                    $qb->setParameter('date_debut', $date_debut);
                    if(!is_null($date_fin))
                    {
                        $qb->andWhere('DATE(s.date)<=:date_fin');
                        $qb->setParameter('date_fin', $date_fin);
                    }
                }else
                {
                    throw new \RuntimeException('Aucune date entrée ou format date invalide!');
                }
                break;
        }
                $qb->andWhere('s.shop=:shop');
                $qb->setParameter('shop', $shop);
                 $qb->andWhere('pd.type=:type');
                $qb->setParameter('type', 1);
               return $qb->getQuery()->getSingleScalarResult();
        
    }
    public function getTotalCharge(Shop $shop,$typeCharge,$condition,$date_debut=null,$date_fin=null)
    {
            $qb= $this->createQueryBuilder('s')
                ->select('SUM(s.montant)')
          ->innerJoin('s.charge', 'ch');
        //on doit d'abor vérifier le type de charge renseigné, sinon on risque d'avoir des résultats incohérents
        if($typeCharge!=Charge::CHARGE_FIXE&&$typeCharge!=Charge::CHARGE_VARIABLE)
        {
            throw  new FatalErrorException('Erreur: Type de dépense inconnu');
        }
         switch($condition)
        {
            case Cons::AUJOURDHUI: $qb->where('DATE(s.date)=CURRENT_DATE()');
                break;
            case Cons::MOIS: $qb->where('MONTH(s.date)=MONTH(CURRENT_DATE()) AND YEAR(s.date)=YEAR(CURRENT_DATE())');
                break;
            case Cons::DATE_INTERVALLE: 
                if(!is_null($date_debut))
                {
                    $qb->where('DATE(s.date)>=:date_debut');
                    $qb->setParameter('date_debut', $date_debut);
                    if(!is_null($date_fin))
                    {
                        $qb->andWhere('DATE(s.date)<=:date_fin');
                        $qb->setParameter('date_fin', $date_fin);
                    }
                }else
                {
                    throw new \RuntimeException('Aucune date entrée ou format date invalide!');
                }
                break;
        }
        
        $qb->andWhere('s.shop=:shop');
                $qb->setParameter('shop', $shop);
                 $qb->andWhere('ch.type=:type');
                $qb->setParameter('type', $typeCharge)
                        ;
                return $qb->getQuery()->getSingleScalarResult();
        
    }
}
