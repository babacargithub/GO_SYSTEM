<?php

namespace GO\ShopBundle\Entity;

use Doctrine\ORM\EntityRepository;
use GO\ShopBundle\Utils\Constants as Cons;
use GO\ClientBundle\Entity\CompteClient;

/**
 * VenteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VenteRepository extends EntityRepository
{
    public function getListeVente(\GO\ShopBundle\Entity\Shop $shop, $condition,$param=null,$date_debut=null, $date_fin=null)
    {
        $qb= $this->createQueryBuilder('v');
        switch($condition)
        {
            case Cons::AUJOURDHUI: $qb->where('DATE(v.date)=CURRENT_DATE()');
                break;
            case Cons::MOIS: $qb->where('MONTH(v.date)=MONTH(CURRENT_DATE()) AND YEAR(v.date)=YEAR(CURRENT_DATE())');
                break;
            case Cons::DATE_INTERVALLE: 
                if(!is_null($date_debut))
                {
                    $qb->where('DATE(v.date)>=:date_debut');
                    $qb->setParameter('date_debut', $date_debut);
                    if(!is_null($date_fin))
                    {
                        $qb->andWhere('DATE(v.date)<=:date_fin');
                        $qb->setParameter('date_fin', $date_fin);
                    }
                }else
                {
                    throw new \RuntimeException('Aucune date entrée ou format date invalide!');
                }
                break;
        }
         $qb->andWhere('v.shop=:shop');
         $qb->setParameter('shop', $shop);
         $qb->orderBy('v.date', 'DESC');
       
        return $qb->getQuery()
                ->getResult();
    }
    public function getTotalVente(\GO\ShopBundle\Entity\Shop $shop, $condition,$param=null,$date_debut=null, $date_fin=null)
    {
        
        $qb= $this->createQueryBuilder('v')
                ->select('SUM(v.prixUnit*v.quantite)');
         switch($condition)
        {
            case Cons::AUJOURDHUI: $qb->where('DATE(v.date)=CURRENT_DATE()');
                break;
            case Cons::MOIS: $qb->where('MONTH(v.date)=MONTH(CURRENT_DATE()) AND YEAR(v.date)=YEAR(CURRENT_DATE())');
                break;
            case Cons::DATE_INTERVALLE: 
                if(!is_null($date_debut))
                {
                    $qb->where('DATE(v.date)>=:date_debut');
                    $qb->setParameter('date_debut', $date_debut);
                    if(!is_null($date_fin))
                    {
                        $qb->andWhere('DATE(v.date)<=:date_fin');
                        $qb->setParameter('date_fin', $date_fin);
                    }
                }else
                {
                    throw new \RuntimeException('Aucune date entrée ou format date invalide!');
                }
                break;
        }
                $qb->andWhere('v.shop=:shop');
                $qb->setParameter('shop', $shop);
               return $qb->getQuery()->getSingleScalarResult();
        
    }
    public function getTotalBenefice(\GO\ShopBundle\Entity\Shop $shop, $condition,$param=null,$date_debut=null, $date_fin=null)
    {
        $qb= $this->createQueryBuilder('v')
                ->select('SUM(v.benefice)');
         switch($condition)
        {
            case Cons::AUJOURDHUI: $qb->where('DATE(v.date)=CURRENT_DATE()');
                break;
            case Cons::MOIS: $qb->where('MONTH(v.date)=MONTH(CURRENT_DATE()) AND YEAR(v.date)=YEAR(CURRENT_DATE())');
                break;
            case Cons::DATE_INTERVALLE: 
                if(!is_null($date_debut))
                {
                    $qb->where('DATE(v.date)>=:date_debut');
                    $qb->setParameter('date_debut', $date_debut);
                    if(!is_null($date_fin))
                    {
                        $qb->andWhere('DATE(v.date)<=:date_fin');
                        $qb->setParameter('date_fin', $date_fin);
                    }
                }else
                {
                    throw new \RuntimeException('Aucune date entrée ou format date invalide!');
                }
                break;
        }
                $qb->andWhere('v.shop=:shop');
                $qb->setParameter('shop', $shop);
               return $qb->getQuery()->getSingleScalarResult();
        
    }
   public function getHistoriqueVenteProduit(Shop $shop,Produit $produit,$date_debut=null, $date_fin=null)
    {
        $qb= $this->createQueryBuilder('v');
        $qb->where('v.shop=:shop');
        $qb->setParameter('shop', $shop);
        $qb->andWhere('v.produit=:produit');
        $qb->setParameter('produit', $produit);
        if(!is_null($date_debut))
                {
                    $qb->andWhere('DATE(v.date)>=:date_debut');
                    $qb->setParameter('date_debut', $date_debut);
                   
                    if(!is_null($date_fin))
                    {
                        $qb->andWhere('DATE(v.date)<=:date_fin');
                        $qb->setParameter('date_fin', $date_fin);
                    }
                }
        
        return $qb->getQuery()->getResult();
    }
    public function getTotalProduit(Shop $shop,Produit $produit,$date_debut=null, $date_fin=null)
    {
        $qb= $this->createQueryBuilder('v');
        $qb->select('COUNT(v.produit) as nombreVente');
        $qb->addSelect('SUM(v.quantite) as totalQuantiteVente');
        $qb->addSelect('SUM(v.quantite*v.prixUnit) as totalVente');
        $qb->addSelect('SUM(v.benefice) as totalBenef');
        $qb->where('v.shop=:shop');
        $qb->setParameter('shop', $shop);
        $qb->andWhere('v.produit=:produit');
        $qb->setParameter('produit', $produit);
        if(!is_null($date_debut))
                {
                    $qb->andWhere('DATE(v.date)>=:date_debut');
                    $qb->setParameter('date_debut', $date_debut);
                   
                    if(!is_null($date_fin))
                    {
                        $qb->andWhere('DATE(v.date)<=:date_fin');
                        $qb->setParameter('date_fin', $date_fin);
                    }
                }
        return $qb->getQuery()->getResult();
    }
    public function getTop10(Shop $shop,$date_debut=null, $date_fin=null)
    {
         $qb= $this->createQueryBuilder('v');
        
        $qb->addSelect('COUNT(v.produit) as nombreVente');
        $qb->groupBy('v.produit');
        $qb->orderBy('nombreVente', 'DESC');
        $qb->setMaxResults(10);
        $qb->where('v.shop=:shop');
        $qb->setParameter('shop', $shop);
        if(!is_null($date_debut))
                {
                    $qb->andWhere('DATE(v.date)>=:date_debut');
                    $qb->setParameter('date_debut', $date_debut);
                   
                    if(!is_null($date_fin))
                    {
                        $qb->andWhere('DATE(v.date)<=:date_fin');
                        $qb->setParameter('date_fin', $date_fin);
                    }
                }
        return $qb->getQuery()->getResult();
        
    }
    
    public function getVentesCompteClient(Shop $shop, CompteClient $compte, array $options=array())
    {
       return $this->createQueryBuilder('v')
                ->select('v')
                ->where('v.compteClient=:compte')
                ->andWhere('v.shop=:shop')
                ->setParameter("compte", $compte)
                ->setParameter("shop", $shop)->getQuery()->getResult();
    }
    public function getTotalVentesCompteClient(Shop $shop, CompteClient $compte,$filter, array $options=array())
    {
      $qb=$this->createQueryBuilder('v')
                
                ->where('v.compteClient=:compte')
                ->andWhere('v.shop=:shop')
                ->setParameter("compte", $compte);
            if($filter==Cons::VENTE_TOTAL_VENTE)
            {$qb->select('SUM(v.quantite*v.prixUnit)');
            }elseif($filter==Cons::VENTE_TOTAL_BENEFICE)
            {
                $qb->select('SUM(v.benefice)');
                
            
            }elseif($filter==Cons::VENTE_NOMBRE_VENTE)
            {
                $qb->select('COUNT(v.id)');
                
            }
               return (int) $qb->setParameter("shop", $shop)->getQuery()->getSingleScalarResult();
    }
}
