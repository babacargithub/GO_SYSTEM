<?php

namespace GO\ShopBundle\Entity;

use Doctrine\ORM\EntityRepository;
use GO\ShopBundle\Utils\Constants as Cons;

/**
 * VenteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VenteServiceRepository extends EntityRepository
{
    public function getListeVente(\GO\ShopBundle\Entity\Shop $shop, $condition,$param=null,$date_debut=null, $date_fin=null)
    {
        $qb= $this->createQueryBuilder('v');
        switch($condition)
        {
            case Cons::AUJOURDHUI: $qb->where('DATE(v.date)=CURRENT_DATE()');
                break;
            case Cons::MOIS: $qb->where('MONTH(v.date)=MONTH(CURRENT_DATE()) AND YEAR(v.date)=YEAR(CURRENT_DATE())');
                break;
            case Cons::DATE_INTERVALLE: 
                if(!is_null($date_debut))
                {
                    $qb->where('DATE(v.date)>=:date_debut');
                    $qb->setParameter('date_debut', $date_debut);
                    if(!is_null($date_fin))
                    {
                        $qb->andWhere('DATE(v.date)<=:date_fin');
                        $qb->setParameter('date_fin', $date_fin);
                    }
                }else
                {
                    throw new \RuntimeException('Aucune date entrée ou format date invalide!');
                }
                break;
        }
         $qb->andWhere('v.shop=:shop');
         $qb->setParameter('shop', $shop);
         $qb->orderBy('v.date', 'DESC');
       
        return $qb->getQuery()
                ->getResult();
    }
    public function getTotalVente(\GO\ShopBundle\Entity\Shop $shop, $condition,$param=null,$date_debut=null, $date_fin=null)
    {
        $qb= $this->createQueryBuilder('v')
                ->select('SUM(v.montant)');
         switch($condition)
        {
            case Cons::AUJOURDHUI: $qb->where('DATE(v.date)=CURRENT_DATE()');
                break;
            case Cons::MOIS: $qb->where('MONTH(v.date)=MONTH(CURRENT_DATE()) AND YEAR(v.date)=YEAR(CURRENT_DATE())');
                break;
            case Cons::DATE_INTERVALLE: 
                if(!is_null($date_debut))
                {
                    $qb->where('DATE(v.date)>=:date_debut');
                    $qb->setParameter('date_debut', $date_debut);
                    if(!is_null($date_fin))
                    {
                        $qb->andWhere('DATE(v.date)<=:date_fin');
                        $qb->setParameter('date_fin', $date_fin);
                    }
                }else
                {
                    throw new \RuntimeException('Aucune date entrée ou format date invalide!');
                }
                break;
        }
                $qb->andWhere('v.shop=:shop');
                $qb->setParameter('shop', $shop);
               return $qb->getQuery()->getSingleScalarResult();
        
    }
    
   
}
