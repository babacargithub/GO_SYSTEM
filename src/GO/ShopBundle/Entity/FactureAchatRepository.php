<?php

namespace GO\ShopBundle\Entity;

use Doctrine\ORM\EntityRepository;
use GO\ShopBundle\Utils\Constants as Cons;
use GO\ShopBundle\Entity\FactureAbstract;
/**
 * FactureAchatRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FactureAchatRepository extends EntityRepository
{
    public function getListeFactures(Shop $shop, $condition,$typeFacture=null,$date_debut=null, $date_fin=null)
    {
        $qb=$this->createQueryBuilder('f');
               
        switch($condition)
        {
            case Cons::AUJOURDHUI: $qb->where('DATE(f.date)=CURRENT_DATE()');
                break;
            case Cons::MOIS: $qb->where('MONTH(f.date)=MONTH(CURRENT_DATE()) AND YEAR(f.date)=YEAR(CURRENT_DATE())');
                break;
            case Cons::DATE_INTERVALLE: 
                if(!is_null($date_debut))
                {
                    $qb->where('DATE(f.date)>=:date_debut');
                    $qb->setParameter('date_debut', $date_debut);
                    if(!is_null($date_fin))
                    {
                        $qb->andWhere('DATE(f.date)<=:date_fin');
                        $qb->setParameter('date_fin', $date_fin);
                    }
                }else
                {
                    throw new \RuntimeException('Aucune date entrée ou format date invalide!');
                }
                break;
        }
                $qb->andWhere('f.shop=:shop')->setParameter('shop', $shop->getId());
                if($typeFacture!=null)
                {
                  $qb->andWhere('f.paye=:type')->setParameter('type', $typeFacture);  
                }
                
               $qb->orderBy('f.date', 'DESC');
        return $qb->getQuery()->getResult();
        
    }
    public function getTotalFacture(Shop $shop, $condition,$typeFacture=null,$date_debut=null, $date_fin=null)
    {
        $qb= $this->createQueryBuilder('f');
                //->innerJoin('SUM(f.montant)');
         switch($condition)
        {
            case Cons::AUJOURDHUI: $qb->where('DATE(f.date)=CURRENT_DATE()');
                break;
            case Cons::MOIS: $qb->where('MONTH(f.date)=MONTH(CURRENT_DATE()) AND YEAR(f.date)=YEAR(CURRENT_DATE())');
                break;
            case Cons::DATE_INTERVALLE: 
                if(!is_null($date_debut))
                {
                    $qb->where('DATE(f.date)>=:date_debut');
                    $qb->setParameter('date_debut', $date_debut);
                    if(!is_null($date_fin))
                    {
                        $qb->andWhere('DATE(f.date)<=:date_fin');
                        $qb->setParameter('date_fin', $date_fin);
                    }
                }else
                {
                    throw new \RuntimeException('Aucune date entrée ou format date invalide!');
                }
                break;
        }
                $qb->andWhere('f.shop=:shop');
                $qb->setParameter('shop', $shop);
               if(!is_null($typeFacture))
                {
                  $qb->andWhere('f.paye=:type')->setParameter('type', $typeFacture);  
                }
                $qb=$qb->getQuery();
                $factures= $qb->getResult();
                $total=0;
                foreach($factures as $facture)
                {
                    $total=$total+$facture->getTotal();
                }
               
               return (int) $total;
        
    }
}
