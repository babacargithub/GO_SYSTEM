<?php

namespace GO\ShopBundle\Entity;
use GO\ShopBundle\Entity\Achat;
use GO\ShopBundle\Entity\Shop; 
use GO\ShopBundle\Entity\Produit;
use GO\ShopBundle\Entity\Inventaire;
use GO\ShopBundle\Entity\ProduitInventaire;
use Doctrine\ORM\EntityRepository;

/**
 * InventaireRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InventaireRepository extends EntityRepository
{
    const PRODUITS_CATEGORIE=1;
    const PRODUITS_TYPE=2;
    const PRODUITS_NOM=3;
    const PRODUITS_NON_INVENTE=4;
    const PRODUITS_DEJA_INVENTE=5;
    const PRODUITS_DEFICIT=6;
    const PRODUITS_SURPLUS=7;
    const PRODUITS_FIND_ALL=8;

    public function getInventairePrecedent()
    {
        
    }
    public function getListeInventaire(Shop $shop)
    {
        return $qb= $this->createQueryBuilder('i')->where('i.shop=:shop')->setParameter('shop', $shop)->getQuery()->getResult();
        
    }
    public function getValeurStockReel(Inventaire $inventaire)
    {
        $qb= $this->createQueryBuilder('i');
          $qb->join('GO\ShopBundle\Entity\ProduitInventaire', 'pi', 'WITH', 'pi.inventaire=i.id')
             ->addSelect('SUM(pi.stockReel*pi.prixAchat) as total')
             ->where("pi.inventaire=:inventaire")->setParameter('inventaire', $inventaire);
          return $qb->getQuery()->getSingleScalarResult();
    }
    public function getValeurDeficitVirtuel(Inventaire $inventaire)
    {
        $qb= $this->createQueryBuilder('i');
          $qb->join('GO\ShopBundle\Entity\ProduitInventaire', 'pi', 'WITH', 'pi.inventaire=i.id')
             ->addSelect('SUM(SUM(pi.stockReel-pi.stockVirtuel)*pi.prixAchat) as total')
             ->where("pi.inventaire=:inventaire")->setParameter('inventaire', $inventaire);
          return $qb->getQuery()->getSingleScalarResult();
    }
    public function getValeurStockVirtuel(Inventaire $inventaire)
    {
        $qb= $this->createQueryBuilder('i');
          $qb->join('GO\ShopBundle\Entity\ProduitInventaire', 'pi', 'WITH', 'pi.inventaire=i.id')
             ->addSelect('SUM(pi.stockVirtuel*pi.prixAchat) as total')
             ->where("pi.inventaire=:inventaire")->setParameter('inventaire', $inventaire);
          return $qb->getQuery()->getSingleScalarResult();
    }
    public function getProduitsDeficit(Inventaire $inventaire)
    {
        $qb= $this->createQueryBuilder('i');
          $qb->join('GO\ShopBundle\Entity\ProduitInventaire', 'pi', 'WITH', 'pi.inventaire=i.id')
             ->select('pi')
             ->where("pi.stockReel<pi.stockVirtuel")
             ->andWhere("pi.inventaire=:inventaire")->setParameter('inventaire', $inventaire);
          return $qb->getQuery()->getResult();
    }
    public function getProduitsSurPlus(Inventaire $inventaire)
    {
        $qb= $this->createQueryBuilder('i');
          $qb->join('GO\ShopBundle\Entity\ProduitInventaire', 'pi', 'WITH', 'pi.inventaire=i.id')
             ->select('pi')
             ->where("pi.stockReel>pi.stockVirtuel")
             ->andWhere("pi.inventaire=:inventaire")->setParameter('inventaire', $inventaire);
          return $qb->getQuery()->getResult();
    }
    // ===== récupération de la liste des produtits de l'inventaire;
    public function getProduits(Inventaire $inventaire, $filter)
    {
      
        $qb= $this->createQueryBuilder('i');
        $qb->join('GO\ShopBundle\Entity\ProduitInventaire', 'pi', 'WITH', 'pi.inventaire=i.id')
             ->select('pi');
         $qb->orderBy('pi.dateEntree', 'DESC');
         switch($filter)
        {
            case self::PRODUITS_FIND_ALL: 
                break;
            case self::PRODUITS_CATEGORIE: $qb->where('MONTH(v.date)=MONTH(CURRENT_DATE()) AND YEAR(v.date)=YEAR(CURRENT_DATE())');
                break;
            
            case self::PRODUITS_NON_INVENTE: 
                $qb= $this->createQueryBuilder('i');
                    $qb->select('pp')->from("\GO\ShopBundle\Entity\Produit", 'pp')
                    ->where(
                       $qb->expr()->notIn(
                           'pp.id',
                           $this->createQueryBuilder('ii')
                               ->from("\GO\ShopBundle\Entity\ProduitInventaire", 'pi2')
                                //->innerJoin('\GO\ShopBundle\Entity\Produit', 'p2')
                                ->select('pi2.produit')
                                ->where('pi2.inventaire = :inventaireSubQuery')
                                ->getQuery()->getSQL()
                     )
                    )
                    ->setParameter('inventaireSubQuery', $inventaire);
                //$qb->join('GO\ShopBundle\Entity\ProduitInventaire', 'pi', 'WITH', 'pi.inventaire=i.id')
             //->select('pi')
             
                //$qb->where('DATE(v.date)>=:date_debut');
                break;
          case self::PRODUITS_TYPE: 
                $qb= $this->createQueryBuilder('i');
                    $qb->select('pp')->from("\GO\ShopBundle\Entity\Produit", 'pp')
                    ->where(
                       $qb->expr()->notIn(
                           'pp.id',
                           $this->createQueryBuilder('ii')
                               ->from("\GO\ShopBundle\Entity\ProduitInventaire", 'pi2')
                                //->innerJoin('\GO\ShopBundle\Entity\Produit', 'p2')
                                ->select('pi2.produit')
                                ->where('pi2.inventaire = :inventaireSubQuery')
                                ->getQuery()->getSQL()
                     )
                    )
                    ->setParameter('inventaireSubQuery', $inventaire);
            case self::PRODUITS_DEJA_INVENTE: 
                $qb->where('DATE(v.date)>=:date_debut');
                break;
            case self::PRODUITS_DEFICIT: 
                $qb->where('DATE(v.date)>=:date_debut');
                break;
            case self::PRODUITS_SURPLUS: 
                $qb->where('DATE(v.date)>=:date_debut');
                break;
        }
         
       $qb->andWhere('pi.inventaire=:inventaire');
       $qb->setParameter('inventaire', $inventaire);
        
        return $qb->getQuery()
                ->getResult();
    }
    
    /*cette méthode permet de vérifier si un produit avec un code barre bien déterminée est déjà enregistré 
     dans l'inventaire*/
    public function isAchatInInventaire(Shop $shop, Inventaire $inventaire, Achat $achat)
    {
        $qb= $this->createQueryBuilder('i');
          $qb->join(ProduitInventaire::class, 'pi', 'WITH', 'pi.inventaire=i.id')
             ->select('pi')
             ->where("pi.codeBar=:achat")
             ->andWhere("i.id=:inventaire")
             ->andWhere("i.shop=:shop")
                  ->setParameter('inventaire', $inventaire)
                  ->setParameter('achat', $achat)
                  ->setParameter('shop', $shop)
                  ;
          return count($qb->getQuery()->getResult())>0;
        
    }
    
}
