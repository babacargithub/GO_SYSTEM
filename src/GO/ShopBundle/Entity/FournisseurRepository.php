<?php

namespace GO\ShopBundle\Entity;

use Doctrine\ORM\EntityRepository;
use GO\ShopBundle\Utils\Constants as Cons;

/**
 * FournisseurRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FournisseurRepository extends EntityRepository
{
    public function getListeFactures(Shop $shop,Fournisseur $fournisseur, $condition,$typeFacture,$date_debut=null, $date_fin=null)
    {
        $qb=$this->createQueryBuilder('f');
        $qb->innerJoin('GOShopBundle:FactureAchat','f_ach', 'WITH', 'f_ach.fournisseur=f.id');
         $qb->select('f_ach');     
        switch($condition)
        {
            case Cons::AUJOURDHUI: $qb->where('DATE(f_ach.date)=CURRENT_DATE()');
                break;
            case Cons::MOIS: $qb->where('MONTH(f_ach.date)=MONTH(CURRENT_DATE()) AND YEAR(f_ach.date)=YEAR(CURRENT_DATE())');
                break;
            case Cons::DATE_INTERVALLE: 
                if(!is_null($date_debut))
                {
                    $qb->where('DATE(f_ach.date)>=:date_debut');
                    $qb->setParameter('date_debut', $date_debut);
                    if(!is_null($date_fin))
                    {
                        $qb->andWhere('DATE(f_ach.date)<=:date_fin');
                        $qb->setParameter('date_fin', $date_fin);
                    }
                }else
                {
                    throw new \RuntimeException('Aucune date entrée ou format date invalide!');
                }
                break;
        }
                $qb->andWhere('f_ach.fournisseur=:fourniss')
                ->setParameter('fourniss', $fournisseur);
                $qb->andWhere('f_ach.shop=:shop')
                ->setParameter('shop', $shop->getId());
                $qb->andWhere('f_ach.paye=:type');
                $qb->setParameter('type', $typeFacture)
                ->orderBy('f_ach.date', 'DESC');
        return $qb->getQuery()->getResult();
        
    }
    public function getTotalFacture(Shop $shop, $condition,$typeFacture,$date_debut=null, $date_fin=null)
    {
        $qb= $this->createQueryBuilder('f');
                //->innerJoin('SUM(f.montant)');
        
         switch($condition)
        {
            case Cons::AUJOURDHUI: $qb->where('DATE(f.date)=CURRENT_DATE()');
                break;
            case Cons::MOIS: $qb->where('MONTH(f.date)=MONTH(CURRENT_DATE()) AND YEAR(f.date)=YEAR(CURRENT_DATE())');
                break;
            case Cons::DATE_INTERVALLE: 
                if(!is_null($date_debut))
                {
                    $qb->where('DATE(f.date)>=:date_debut');
                    $qb->setParameter('date_debut', $date_debut);
                    if(!is_null($date_fin))
                    {
                        $qb->andWhere('DATE(f.date)<=:date_fin');
                        $qb->setParameter('date_fin', $date_fin);
                    }
                }else
                {
                    throw new \RuntimeException('Aucune date entrée ou format date invalide!');
                }
                break;
        }
                $qb->andWhere('f.shop=:shop');
                $qb->setParameter('shop', $shop);
                $qb->andWhere('f.paye=:type');
                $qb->setParameter('type', $typeFacture);
                $qb=$qb->getQuery();
                $factures= $qb->getResult();
                $total=0;
                foreach($factures as $facture)
                {
                    $total=$total+$facture->getTotal();
                }
               
               return (int) $total;
        
    }
}
